generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Aluno {
    id                  String    @id @default(uuid())
    name                String
    email               String    @unique
    password            String
    imagem         String?
    recoveryPass        String?
    token               String?
    banner        String?
    dataNascimento      DateTime?
    endereco            String?
    curriculo           String?   @default("") @db.VarChar(5000)
    sobre               String?
    rm                  String?   @unique
    tentativasRestantes Int       @default(5)
    turmas              AlunoTurma[]
    cursosExtracurriculares      Extracurricular[]
    vinculosAluno       Vinculo[] @relation("AlunoVinculo")
    vinculoComoAluno    Vinculo[] @relation("VinculoComAluno")
    validated           Boolean    @default(false)
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt

    @@map("alunos")
}

model Professor {
    id                   String        @id @default(uuid())
    name                 String
    email                String        @unique
    password             String
    recoveryPass         String?
    tituloPrincipal      String
    imagem               String?
    banner               String?
    validated            Boolean       @default(false)
    coordenador          Coordenador[]
    atividade            Atividade[]
    tentativasRestantes  Int           @default(5)
    vinculosProfessor    Vinculo[]     @relation("ProfessorVinculo")
    vinculoComoProfessor Vinculo[]     @relation("VinculoComProfessor")
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt

    @@map("professores")
}

model Vinculo {
    id                    String     @id @default(uuid())
    alunoId               String?
    professorId           String?
    vinculoComAlunoId     String?
    vinculoComProfessorId String?
    accepted              Boolean    @default(false)
    aluno                 Aluno?     @relation("AlunoVinculo", fields: [alunoId], references: [id])
    professor             Professor? @relation("ProfessorVinculo", fields: [professorId], references: [id])
    vinculoComAluno       Aluno?     @relation("VinculoComAluno", fields: [vinculoComAlunoId], references: [id])
    vinculoComProfessor   Professor? @relation("VinculoComProfessor", fields: [vinculoComProfessorId], references: [id])
    createdAt             DateTime   @default(now())
    updatedAt             DateTime   @updatedAt

    @@unique([alunoId, professorId, vinculoComAlunoId, vinculoComProfessorId])
    @@map("vinculos")
}

model Admin {
    id          String   @id @default(uuid())
    name        String
    email       String   @unique
    password    String
    imagem String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("admins")
}

model Curso {
    id            String      @id @default(uuid())
    name          String
    turno         Turno
    duracao       String
    coordenador   Coordenador @relation(fields: [coordenadorId], references: [id])
    coordenadorId String
    turma         Turma[]
    vaga          Vaga[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@map("cursos")
}

enum Turno {
    MANHA
    TARDE
    NOITE
    INTEGRAL
}

model Turma {
    id        String   @id @default(uuid())
    inicio    String
    fim       String
    curso     Curso    @relation(fields: [cursoId], references: [id])
    cursoId   String
    alunos    AlunoTurma[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("turmas")
}

model AlunoTurma {
    alunoId  String  @default(uuid())
    turmaId  String  @default(uuid())
    aluno    Aluno   @relation(fields: [alunoId], references: [id])
    turma    Turma   @relation(fields: [turmaId], references: [id])

    @@id([alunoId, turmaId])
    @@map("alunos_turmas")
}

model Extracurricular {
    extracurricularId String @id @default(uuid())
    alunoId String
    aluno    Aluno   @relation(fields: [alunoId], references: [id])
    instituicao String
    descricao String
    inicio DateTime
    fim DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@map("extracurriculares")
}

model Empresa {
    id                  String   @id @default(uuid())
    name                String
    email               String   @unique
    password            String
    imagem       String?
    cnpj                String   @unique
    endereco            String?
    telefone            String?
    token               String?
    patrocinador        Boolean  @default(false)
    validated           Boolean  @default(false)
    vaga                Vaga[]
    tentativasRestantes Int      @default(5)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    @@map("empresas")
}

model Vaga {
    id            String      @id @default(uuid())
    curso         Curso       @relation(fields: [cursoId], references: [id])
    cursoId       String
    empresa       Empresa     @relation(fields: [empresaId], references: [id])
    empresaId     String
    requisitos    String
    beneficios    String
    remuneracao   String
    cargaHoraria  String
    dataInicio    String
    dataFim       String
    status        String
    funcionario   Funcionario @relation(fields: [cadastradorId], references: [id])
    cadastradorId String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@map("vagas")
}

model Coordenador {
    id          String    @id @default(uuid())
    name        String
    professor   Professor @relation(fields: [professorId], references: [id])
    professorId String
    curso       Curso[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@map("coordenadores")
}

model Funcionario {
    id                  String   @id @default(uuid())
    name                String
    email               String   @unique
    password            String
    recoveryPass        String?
    imagem   String?
    cargo               Cargo
    vaga                Vaga[]
    validated           Boolean  @default(false)
    tentativasRestantes Int      @default(5)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    @@map("funcionarios")
}

enum Cargo {
    GESTAO
    ADMINISTRACAO
    DIRECAO
    ORIENTACAO
}

model Atividade {
    id              String    @id @default(uuid())
    title           String
    descricao       String    @db.VarChar(1000)
    professor       Professor @relation(fields: [professorId], references: [id])
    professorId     String
    imagem String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@map("atividades")
}
