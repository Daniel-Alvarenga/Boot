generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Aluno {
    id                      String            @id @default(uuid())
    name                    String
    email                   String            @unique
    password                String
    imagem                  String?
    recoveryPass            String?
    token                   String?
    banner                  String?
    dataNascimento          DateTime?
    endereco                String?
    curriculo               String?           @default("") @db.VarChar(5000)
    sobre                   String?
    rm                      String?           @unique
    tentativasRestantes     Int               @default(5)
    validated               Boolean           @default(false)
    notas                   Nota[]
    turmas                  AlunoTurma[]
    boletins                Boletim[]
    atividades              AlunoAtividade[]
    cursosExtracurriculares Extracurricular[]
    vinculosAluno           Vinculo[]         @relation("AlunoVinculo")
    vinculoComoAluno        Vinculo[]         @relation("VinculoComAluno")
    mensagensEnviadas       Mensagem[]        @relation("MensagensEnviadasAluno")
    mensagensRecebidas      Mensagem[]        @relation("MensagensRecebidasAluno")
    createdAt               DateTime          @default(now())
    updatedAt               DateTime          @updatedAt

    @@map("alunos")
}

model Professor {
    id                   String        @id @default(uuid())
    name                 String
    email                String        @unique
    password             String
    recoveryPass         String?
    tituloPrincipal      String
    imagem               String?
    banner               String?
    validated            Boolean       @default(false)
    tentativasRestantes  Int           @default(5)
    atividade            Atividade[]
    coordenador          Coordenador[]
    vinculosProfessor    Vinculo[]     @relation("ProfessorVinculo")
    vinculoComoProfessor Vinculo[]     @relation("VinculoComProfessor")
    mensagensEnviadas    Mensagem[]    @relation("MensagensEnviadasProfessor")
    mensagensRecebidas   Mensagem[]    @relation("MensagensRecebidasProfessor")
    createdAt            DateTime      @default(now())
    updatedAt            DateTime      @updatedAt

    @@map("professores")
}

model Vinculo {
    id                    String        @id @default(uuid())
    alunoId               String?
    professorId           String?
    vinculoComAlunoId     String?
    vinculoComProfessorId String?
    accepted              Boolean       @default(false)
    aluno                 Aluno?        @relation("AlunoVinculo", fields: [alunoId], references: [id])
    professor             Professor?    @relation("ProfessorVinculo", fields: [professorId], references: [id])
    vinculoComAluno       Aluno?        @relation("VinculoComAluno", fields: [vinculoComAlunoId], references: [id])
    vinculoComProfessor   Professor?    @relation("VinculoComProfessor", fields: [vinculoComProfessorId], references: [id])
    notificacao           Notificacao[]
    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt

    @@unique([alunoId, professorId, vinculoComAlunoId, vinculoComProfessorId])
    @@map("vinculos")
}

model Admin {
    id        String   @id @default(uuid())
    name      String
    email     String   @unique
    password  String
    imagem    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("admins")
}

model Curso {
    id            String         @id @default(uuid())
    name          String
    turno         Turno
    duracao       String
    coordenador   Coordenador    @relation(fields: [coordenadorId], references: [id])
    coordenadorId String
    materias      CursoMateria[]
    turma         Turma[]
    vaga          Vaga[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt

    @@map("cursos")
}

enum Turno {
    MANHA
    TARDE
    NOITE
    INTEGRAL
}

model Turma {
    id        String       @id @default(uuid())
    inicio    String
    fim       String
    curso     Curso        @relation(fields: [cursoId], references: [id])
    cursoId   String
    alunos    AlunoTurma[]
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    @@map("turmas")
}

model AlunoTurma {
    alunoId String @default(uuid())
    turmaId String @default(uuid())
    aluno   Aluno  @relation(fields: [alunoId], references: [id])
    turma   Turma  @relation(fields: [turmaId], references: [id])

    @@id([alunoId, turmaId])
    @@map("alunos_turmas")
}

model Boletim {
    id      String          @id @default(uuid())
    alunoId String          @default(uuid())
    link    String
    caminho String
    status  SituacaoBoletim @default(EM_ANALISE)
    aluno   Aluno           @relation(fields: [alunoId], references: [id])

    @@map("boletins")
}

enum SituacaoBoletim {
    EM_ANALISE
    RECUSADO
    APROVADO
}

model AlunoAtividade {
    alunoId     String    @default(uuid())
    atividadeId String    @default(uuid())
    mencao      Mencao
    aluno       Aluno     @relation(fields: [alunoId], references: [id])
    atividade   Atividade @relation(fields: [atividadeId], references: [id])

    @@id([alunoId, atividadeId])
    @@map("alunos_atividades")
}

enum Mencao {
    I
    R
    B
    MB
}

model Extracurricular {
    extracurricularId String   @id @default(uuid())
    alunoId           String
    aluno             Aluno    @relation(fields: [alunoId], references: [id])
    instituicao       String
    descricao         String
    inicio            DateTime
    fim               DateTime
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@map("extracurriculares")
}

model Empresa {
    id                  String     @id @default(uuid())
    name                String
    email               String     @unique
    password            String
    imagem              String?
    cnpj                String     @unique
    endereco            String?
    telefone            String?
    token               String?
    patrocinador        Boolean    @default(false)
    validated           Boolean    @default(false)
    tentativasRestantes Int        @default(5)
    vaga                Vaga[]
    mensagensEnviadas   Mensagem[] @relation("MensagensEnviadasEmpresa")
    mensagensRecebidas  Mensagem[] @relation("MensagensRecebidasEmpresa")
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt

    @@map("empresas")
}

model Vaga {
    id            String        @id @default(uuid())
    titulo        String
    cursoId       String
    empresaId     String
    requisitos    String
    beneficios    String
    remuneracao   String
    cargaHoraria  String
    entrada       String
    saida         String
    status        String
    descricao     String
    cadastradorId String
    empresa       Empresa       @relation(fields: [empresaId], references: [id])
    curso         Curso         @relation(fields: [cursoId], references: [id])
    funcionario   Funcionario   @relation(fields: [cadastradorId], references: [id])
    notificacao   Notificacao[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    @@map("vagas")
}

model Coordenador {
    id          String    @id @default(uuid())
    name        String
    professor   Professor @relation(fields: [professorId], references: [id])
    professorId String
    curso       Curso[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@map("coordenadores")
}

model Funcionario {
    id                  String     @id @default(uuid())
    name                String
    email               String     @unique
    password            String
    recoveryPass        String?
    imagem              String?
    cargo               Cargo
    validated           Boolean    @default(false)
    tentativasRestantes Int        @default(5)
    vaga                Vaga[]
    mensagensEnviadas   Mensagem[] @relation("MensagensEnviadasFuncionario")
    mensagensRecebidas  Mensagem[] @relation("MensagensRecebidasFuncionario")
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt

    @@map("funcionarios")
}

enum Cargo {
    GESTAO
    ADMINISTRACAO
    DIRECAO
    ORIENTACAO
}

model Atividade {
    id          String           @id @default(uuid())
    title       String
    descricao   String           @db.VarChar(1000)
    professorId String
    imagem      String?
    alunos      AlunoAtividade[]
    professor   Professor        @relation(fields: [professorId], references: [id])
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt

    @@map("atividades")
}

model Mensagem {
    id                        String        @id @default(uuid())
    conteudo                  String
    alunoRemetenteId          String?
    alunoDestinatarioId       String?
    professorRemetenteId      String?
    professorDestinatarioId   String?
    funcionarioRemetenteId    String?
    funcionarioDestinatarioId String?
    empresaRemetenteId        String?
    empresaDestinatarioId     String?
    alunoRemetente            Aluno?        @relation("MensagensEnviadasAluno", fields: [alunoRemetenteId], references: [id], map: "alunoRemetente_FK")
    alunoDestinatario         Aluno?        @relation("MensagensRecebidasAluno", fields: [alunoDestinatarioId], references: [id], map: "alunoDestinatario_FK")
    professorRemetente        Professor?    @relation("MensagensEnviadasProfessor", fields: [professorRemetenteId], references: [id], map: "professorRemetente_FK")
    professorDestinatario     Professor?    @relation("MensagensRecebidasProfessor", fields: [professorDestinatarioId], references: [id], map: "professorDestinatario_FK")
    funcionarioRemetente      Funcionario?  @relation("MensagensEnviadasFuncionario", fields: [funcionarioRemetenteId], references: [id], map: "funcionarioRemetente_FK")
    funcionarioDestinatario   Funcionario?  @relation("MensagensRecebidasFuncionario", fields: [funcionarioDestinatarioId], references: [id], map: "funcionarioDestinatario_FK")
    empresaRemetente          Empresa?      @relation("MensagensEnviadasEmpresa", fields: [empresaRemetenteId], references: [id], map: "empresaRemetente_FK")
    empresaDestinatario       Empresa?      @relation("MensagensRecebidasEmpresa", fields: [empresaDestinatarioId], references: [id], map: "empresaDestinatario_FK")
    notificacao               Notificacao[]
    createdAt                 DateTime      @default(now())
    updatedAt                 DateTime      @updatedAt

    @@map("mensagens")
}

model Materia {
    id        String         @id @default(uuid())
    name      String
    cursos    CursoMateria[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    Nota      Nota[]

    @@map("materias")
}

model CursoMateria {
    cursoId   String  @default(uuid())
    materiaId String  @default(uuid())
    curso     Curso   @relation(fields: [cursoId], references: [id])
    materia   Materia @relation(fields: [materiaId], references: [id])

    @@id([cursoId, materiaId])
    @@map("cursos_materias")
}

model Nota {
    id        String   @id @default(uuid())
    alunoId   String
    materiaId String
    bimestre  Int
    ano       Int
    mencao    Mencao
    aluno     Aluno    @relation(fields: [alunoId], references: [id])
    materia   Materia  @relation(fields: [materiaId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("notas")
}

model Notificacao {
    id              String          @id @default(uuid())
    titulo          String
    descricao       String
    criadorId       String
    recipientEmails Json   
    tipo            TipoNotificacao
    dispensada      Boolean         @default(false)

    mensagemId String?
    estagioId  String?
    vinculoId  String?

    mensagem Mensagem? @relation(fields: [mensagemId], references: [id])
    estagio  Vaga?     @relation(fields: [estagioId], references: [id])
    vinculo  Vinculo?  @relation(fields: [vinculoId], references: [id])

    criador  Identifier
    receptor Identifier

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("notificacoes")
}

enum TipoNotificacao {
    MENSAGEM
    SOLICITACAO
    ESTAGIO
    ATVIDADE
}

enum Identifier {
    ALUNO
    EMPRESA
    FUNCIONARIO
    PROFESSOR
}
